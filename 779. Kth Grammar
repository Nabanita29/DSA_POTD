

public int kthGrammar(int n, int k) {
    // Base Case: When n is 1, return 0.
    if (n == 1){
        return 0;
    }

    // Recursive Call: Calculate parent value for n-1 and modified k.
    int parent = kthGrammar(n-1, (k+1)/2);

    // Determine the k-th element based on k being even or odd.
    if (k % 2 == 0) {
        // If k is even, return 0 if parent is 1, otherwise return 1.
        return parent == 1 ? 0 : 1;
    } else {
        // If k is odd, return the value of the parent.
        return parent;
    }
}


public int kthGrammar(int n, int k) {

This declares a method named kthGrammar that takes two integers, n and k, and returns an integer.
if (n == 1){ return 0; }

Checks if n is 1. If so, returns 0. This is the base case.
int parent = kthGrammar(n-1, (k+1)/2);

Calls the kthGrammar function recursively with n reduced by 1 and k modified.
if (k % 2 == 0) { return parent == 1 ? 0 : 1; }

If k is even, return 0 if parent is 1, else return 1.
else { return parent; }

If k is odd, return the value of parent.
